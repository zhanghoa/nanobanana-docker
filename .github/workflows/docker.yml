// main.ts
import { serveDir } from "https://deno.land/std@0.197.0/http/file_server.ts";

// 从环境变量获取 OpenRouter API Key
const OPENROUTER_API_KEY = Deno.env.get("OPENROUTER_API_KEY");

if (!OPENROUTER_API_KEY) {
  console.warn("⚠️  OPENROUTER_API_KEY 未设置！");
}

// 处理 /api/key-status 路由
function handleKeyStatus(): Response {
  return new Response(JSON.stringify({ isSet: !!OPENROUTER_API_KEY }), {
    headers: { "Content-Type": "application/json" },
    status: 200,
  });
}

// 代理 /generate 请求到 OpenRouter
async function handleGenerateProxy(req: Request): Promise<Response> {
  if (!OPENROUTER_API_KEY) {
    return new Response("Missing OPENROUTER_API_KEY", { status: 500 });
  }

  const url = "https://openrouter.ai/api/v1/chat/completions";
  const body = await req.json();

  try {
    const resp = await fetch(url, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "Authorization": `Bearer ${OPENROUTER_API_KEY}`,
        "HTTP-Referer": "http://localhost:8088/", // 可选：设置来源
        "X-Title": "Gemini Proxy", // 可选：项目名称
      },
      body: JSON.stringify(body),
    });

    const data = await resp.json();
    return new Response(JSON.stringify(data), {
      status: resp.status,
      headers: { "Content-Type": "application/json" },
    });
  } catch (err) {
    return new Response(`Proxy error: ${err.message}`, { status: 500 });
  }
}

// 主请求处理器
Deno.serve(
  { port: 8088 },
  (req) => {
    const url = new URL(req.url);
    const pathname = url.pathname;

    // 路由分发
    if (pathname === "/api/key-status") {
      return handleKeyStatus();
    }

    if (pathname === "/generate" && req.method === "POST") {
      return handleGenerateProxy(req);
    }

    // 默认：返回静态文件（如 index.html）
    return serveDir(req, {
      fsRoot: "static",
      urlRoot: "",
      showDirListing: true,
      enableCors: true,
    });
  }
);
